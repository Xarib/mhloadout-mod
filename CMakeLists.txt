# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(mhloadout-plugin)

include(FetchContent)

set(BUILD_SHARED_LIBS_BACKUP BUILD_SHARED_LIBS) # Backup old variable
set(BUILD_SHARED_LIBS OFF)

message(STATUS "Fetching cpr (a2d35a1cb9f3f7e2f1469d6a189751331dc99f96)...")
FetchContent_Declare(cpr
	GIT_REPOSITORY
		"https://github.com/libcpr/cpr"
	GIT_TAG
		a2d35a1cb9f3f7e2f1469d6a189751331dc99f96
)
FetchContent_MakeAvailable(cpr)

set(BUILD_SHARED_LIBS BUILD_SHARED_LIBS_BACKUP) # Restore old variable

# Target: reframework
add_library(reframework INTERFACE)

target_include_directories(reframework INTERFACE
	"deps/reframework/include"
)

# Target: lua
set(lua_SOURCES
	"deps/lua/src/lapi.c"
	"deps/lua/src/lauxlib.c"
	"deps/lua/src/lbaselib.c"
	"deps/lua/src/lcode.c"
	"deps/lua/src/lcorolib.c"
	"deps/lua/src/lctype.c"
	"deps/lua/src/ldblib.c"
	"deps/lua/src/ldebug.c"
	"deps/lua/src/ldo.c"
	"deps/lua/src/ldump.c"
	"deps/lua/src/lfunc.c"
	"deps/lua/src/lgc.c"
	"deps/lua/src/linit.c"
	"deps/lua/src/liolib.c"
	"deps/lua/src/llex.c"
	"deps/lua/src/lmathlib.c"
	"deps/lua/src/lmem.c"
	"deps/lua/src/loadlib.c"
	"deps/lua/src/lobject.c"
	"deps/lua/src/lopcodes.c"
	"deps/lua/src/loslib.c"
	"deps/lua/src/lparser.c"
	"deps/lua/src/lstate.c"
	"deps/lua/src/lstring.c"
	"deps/lua/src/lstrlib.c"
	"deps/lua/src/ltable.c"
	"deps/lua/src/ltablib.c"
	"deps/lua/src/ltm.c"
	"deps/lua/src/lua.c"
	"deps/lua/src/luac.c"
	"deps/lua/src/lundump.c"
	"deps/lua/src/lutf8lib.c"
	"deps/lua/src/lvm.c"
	"deps/lua/src/lzio.c"
	cmake.toml
)

add_library(lua STATIC)

target_sources(lua PRIVATE ${lua_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${lua_SOURCES})

target_include_directories(lua PUBLIC
	"deps/lua/src"
)

# Target: sol2
add_library(sol2 INTERFACE)

target_include_directories(sol2 INTERFACE
	"deps/sol2/single/include"
)

# Target: mhloadout-plugin
set(mhloadout-plugin_SOURCES
	"src/plugin.cpp"
	"src/plugin.hpp"
	cmake.toml
)

add_library(mhloadout-plugin SHARED)

target_sources(mhloadout-plugin PRIVATE ${mhloadout-plugin_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${mhloadout-plugin_SOURCES})

target_compile_features(mhloadout-plugin PUBLIC
	cxx_std_20
)

target_link_libraries(mhloadout-plugin PUBLIC
	reframework
	lua
	sol2
	cpr::cpr
)

